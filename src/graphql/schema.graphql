scalar DateTime

# ============================
# Enums
# ============================
enum HorseStatus {
  pending
  published
  sold
}

# ============================
# Types
# ============================

type Horse {
  id: ID!
  user: User!
  category: HorseCategory!
  name: String!
  pedigree: String
  age: Int!
  gender: HorseGender!
  height: Int!
  discipline: HorseDiscipline!
  location: String!
  price: Float!
  description: String!
  veterinaryDocumentAvailable: Boolean!
  xrayResultsAvailable: Boolean!
  images: [HorseImage!]!
  videoUrl: String
  vetReport: HorseVetReport
  xrayResults: HorseXrayResults
  status: HorseStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  favoriteByUsers: [UserFavoriteHorses!]!
}

type HorseCategory {
  id: ID!
  name: String!
  imageUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  horses: [Horse!]
}

type HorseGender {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  horses: [Horse!]
}

type HorseImage {
  id: ID!
  url: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  horse: Horse!
}

type HorseDiscipline {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  horses: [Horse!]
}

type HorseVetReport {
  id: ID!
  horse: Horse!
  reportUrl: String!
  public: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HorseXrayResults {
  id: ID!
  horse: Horse!
  xrayUrl: String!
  public: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: ID!
  name: String!
  firebaseUid: String!
  phoneNumber: String
  email: String
  whatsAppNumber: String
  verifiedSeller: Boolean!
  userFavoriteHorses: [UserFavoriteHorses!]
  notifications: [Notification!]
  role: String!
  horses: [Horse!]
  reviews: [UserReview!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserFavoriteHorses {
  id: ID!
  user: User!
  horse: Horse!
  createdAt: DateTime!
}

type UserReview {
  id: ID!
  user: User!
  reviewer: String!
  rating: Int!
  comment: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Notification {
  id: ID!
  user: User!
  title: String!
  message: String!
  read: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# ============================
# Inputs
# ============================

input CreateHorseCategoryInput {
  name: String!
  imageUrl: String!
}

input CreateHorseGenderInput {
  name: String!
}

input CreateHorseDisciplineInput {
  name: String!
}

input CreateHorseInput {
  userId: ID!
  categoryId: ID!
  name: String!
  pedigree: String
  age: Int!
  genderId: ID!
  height: Int!
  disciplineId: ID!
  location: String!
  price: Float!
  description: String!
  veterinaryDocumentAvailable: Boolean
  xrayResultsAvailable: Boolean
  videoUrl: String
}

input UpdateHorseInput {
  name: String
  pedigree: String
  age: Int
  height: Int
  location: String
  description: String
  status: HorseStatus
  videoUrl: String
  categoryId: ID
  genderId: ID
  disciplineId: ID
  price: Float
  veterinaryDocumentAvailable: Boolean
  xrayResultsAvailable: Boolean
}

input UpdateUserInput {
  email: String
  name: String
  phoneNumber: String
  whatsAppNumber: String
  role: String
  verifiedSeller: Boolean
}

input CreateUserInput {
  email: String!
  name: String!
  firebaseUid: String!
}

# ============================
# Queries
# ============================

type Query {
  horses(status: HorseStatus): [Horse!]!
  horse(id: ID!): Horse

  horseCategories: [HorseCategory!]!
  horseGenders: [HorseGender!]!
  horseDisciplines: [HorseDiscipline!]!

  users: [User!]
  user(id: ID!): User
}

# ============================
# Mutations
# ============================

type Mutation {
  createHorse(data: CreateHorseInput!): Horse!
  updateHorse(id: ID!, data: UpdateHorseInput!): Horse!
  deleteHorse(id: ID!): Horse!

  updateUser(id: ID!, data: UpdateUserInput!): User!

  createHorseCategory(data: CreateHorseCategoryInput!): HorseCategory!
  deleteHorseCategory(id: ID!): HorseCategory!

  createHorseGender(data: CreateHorseGenderInput!): HorseGender!
  deleteHorseGender(id: ID!): HorseGender!


  createHorseDiscipline(data: CreateHorseDisciplineInput!): HorseDiscipline!
  deleteHorseDiscipline(id: ID!): HorseDiscipline!

  createUser(data: CreateUserInput!): User!
}